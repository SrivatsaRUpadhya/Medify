// Register a Service Worker.
function urlBase64ToUint8Array(base64String) {
	var padding = "=".repeat((4 - (base64String.length % 4)) % 4);
	var base64 = (base64String + padding)
		.replace(/\-/g, "+")
		.replace(/_/g, "/");

	var rawData = window.atob(base64);
	var outputArray = new Uint8Array(rawData.length);

	for (var i = 0; i < rawData.length; ++i) {
		outputArray[i] = rawData.charCodeAt(i);
	}
	return outputArray;
}

function setWorker() {
	if ("serviceWorker" in navigator) {
		navigator.serviceWorker
			.register("js/serviceWorker.js")
			.then(function (registration) {
				// Use the PushManager to get the user's subscription to the push service.
				return registration
					.update()
					.then(function () {
						console.log("trying to get subscription");
						return registration.pushManager
							.getSubscription()
							.then(async function (subscription) {
								// If a subscription was found, return it.
								if (subscription) {
									console.log("subscription found");
									return subscription;
								}

								// Get the server's public key
								const response = await fetch(
									"/api/notifications/vapidPublicKey"
								);
								console.log("response", response);
								const vapidPublicKey = await response.text();
								// Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet
								// urlBase64ToUint8Array() is defined in /tools.js
								const convertedVapidKey =
									urlBase64ToUint8Array(vapidPublicKey);

								// Otherwise, subscribe the user (userVisibleOnly allows to specify that we don't plan to
								// send notifications that don't have a visible effect for the user).
								return registration.pushManager.subscribe({
									userVisibleOnly: true,
									applicationServerKey: convertedVapidKey,
								});
							})
							.catch(function (err) {
								console.log("could not get subscription", err);
							});
					})
					.catch(function (err) {
						console.log("could not update worker", err);
					});
			})
			.then(function (subscription) {
				// Send the subscription details to the server using the Fetch API.
				console.log("subscription", subscription);
				fetch("/api/notifications/register", {
					method: "post",
					headers: {
						"Content-type": "application/json",
					},
					body: JSON.stringify({
						subscription: subscription.toJSON(),
					}),
				});

				document.getElementById("doIt").onclick = function () {
					console.log("clicked");
					// Ask the server to send the client a notification (for testing purposes, in actual
					// applications the push notification is likely going to be generated by some event
					// in the server).
					fetch("/api/notifications/sendNotification", {
						method: "post",
						headers: {
							"Content-type": "application/json",
						},
						body: JSON.stringify({
							subscription: subscription,
							delay: 5,
							ttl: 0,
						}),
					});
				};
			})
			.catch(function (err) {
				console.log(err);
			});
	} else {
		console.log("service worker not supported");
	}
}
setWorker();
